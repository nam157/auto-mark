# -*- coding: utf-8 -*-
"""digits_recognition_test_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SnLX0P-MhEYCqMsMSw-Djk7gJS_c9gfM

### Tiếp Theo: Chúng ta sẽ sử dụng tập Mnist để nhận diện chữ số viết tay
"""

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras import backend as K
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import TensorBoard
import datetime, os
import tensorflow as tf

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

logdir = os.path.join("logs", datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = TensorBoard(logdir, histogram_freq=1)

(X_train,y_train),(X_test,y_test) = mnist.load_data()

X_train.shape,y_train.shape

X_test.shape,y_train.shape

#Reshape(60000,28,28,1) phù hợp với đầu vào mạng CNN
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0],28,28,1)

#scale data
# X_train = tf.keras.utils.normalize(X_train,axis = 1)
# X_test = tf.keras.utils.normalize(X_test,axis = 1)

#Chuyển đổi dtype=uint8 sang float32
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

X_train /= 255
X_test /= 255

#Encoding
y_train = to_categorical(y_train,10)
y_test = to_categorical(y_test,10)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

input_shape = (28, 28, 1)
from tensorflow.keras.layers import BatchNormalization

model = Sequential()

model.add(Conv2D(32,(3,3),padding='same',activation='relu',input_shape = (28,28,1)))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(optimizer=tf.keras.optimizers.Adam(),loss=tf.keras.losses.categorical_crossentropy,metrics='accuracy')

model.fit(X_train,y_train,epochs=500,batch_size=128,validation_data=(X_test,y_test),callbacks=[tensorboard_callback])

from sklearn.metrics import confusion_matrix
import numpy as np
confusion_matrix(np.argmax(y_test,axis = 1),np.argmax(model.predict(X_test),axis = 1))

model.evaluate(X_test,y_test)

"""### Test tập dữ liệu"""

import matplotlib.pyplot as plt
import numpy as np
from PIL import ImageGrab, Image
import cv2

plt.imshow(X_test[1000].reshape(28,28))

y_pr_test = model.predict(X_test[1000].reshape(1,28,28,1))
y_pr_test

np.argmax(y_pr_test)

import cv2
path = '/content/8.jpg'
image = cv2.imread(path)

plt.imshow(image)

gray =  cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

rezied = cv2.resize(gray,(28,28),interpolation = cv2.INTER_AREA)

plt.imshow(rezied)

newing = tf.keras.utils.normalize(rezied,axis = 1)

newing = np.array(newing).reshape(-1,28,28,1)

y_pr = model.predict(newing)
y_pr

np.argmax(y_pr)



"""### Lưu model và kiểm tra callbacks"""

from google.colab import drive
drive.mount('/content/drive')

model.save('weight.h5')

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs

